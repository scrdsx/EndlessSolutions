local License = "KEYAUTH-D12fac-I0l6j0-pTI31p-3m2bsj-ZHoUdA-aWx0LQ" --* Your License to use this script.

local HttpService = game:GetService("HttpService")
local StarterGui = game:GetService("StarterGui")
local LuaName = "KeyAuth"

StarterGui:SetCore("SendNotification", {
	Title = LuaName,
	Text = "Intializing Authentication...",
	Duration = 5
})

--* Configuration *--
local initialized = false
local sessionid = ""

--* Application Details *--
Name = "hyperion" --* Application Name
Ownerid = "pIZcfcgqTd" --* OwnerID
APPVersion = "1.0"     --* Application Version

local req = game:HttpGet('https://keyauth.win/api/1.1/?name=' .. Name .. '&ownerid=' .. Ownerid .. '&type=init&ver=' .. APPVersion)

if req == "KeyAuth_Invalid" then 
    print(" Error: Application not found.")

    StarterGui:SetCore("SendNotification", {
        Title = LuaName,
        Text = " Error: Application not found.",
        Duration = 3
    })

    return false
end

local data = HttpService:JSONDecode(req)

if data.success == true then
    initialized = true
    sessionid = data.sessionid
elseif (data.message == "invalidver") then
    print(" Error: Wrong application version..")

    StarterGui:SetCore("SendNotification", {
        Title = LuaName,
        Text = " Error: Wrong application version..",
        Duration = 3
    })

    return false
else
    print(" Error: " .. data.message)
    return false
end

print("\n\n Licensing... \n")
local req = game:HttpGet('https://keyauth.win/api/1.1/?name=' .. Name .. '&ownerid=' .. Ownerid .. '&type=license&key=' .. License ..'&ver=' .. APPVersion .. '&sessionid=' .. sessionid)
local data = HttpService:JSONDecode(req)

if data.success == false then 
    StarterGui:SetCore("SendNotification", {
        Title = LuaName,
        Text = " Error: " .. data.message,
        Duration = 5
    })

    return false
end

StarterGui:SetCore("SendNotification", {
    Title = LuaName,
    Text = " Successfully Authorized :)",
    Duration = 5
})

--* Your code here *--

local player = game.Players.LocalPlayer
local UserInputService = game:GetService("UserInputService")

local isRunning = false

-- Create the UI elements
local screenGui = Instance.new("ScreenGui", player:WaitForChild("PlayerGui"))
screenGui.Name = "TeleportGui"
screenGui.ResetOnSpawn = false

local frame = Instance.new("Frame", screenGui)
frame.Size = UDim2.new(0, 200, 0, 100)
frame.Position = UDim2.new(0.5, -100, 0.5, -50)
frame.BackgroundColor3 = Color3.new(0, 0, 0)
frame.BorderSizePixel = 0
frame.Active = true
frame.Draggable = true

local checkBox = Instance.new("TextButton", frame)
checkBox.Size = UDim2.new(0, 20, 0, 20)
checkBox.Position = UDim2.new(0, 10, 0, 10)
checkBox.BackgroundColor3 = Color3.new(1, 1, 1)
checkBox.Text = ""

local checkMark = Instance.new("TextLabel", checkBox)
checkMark.Size = UDim2.new(1, 0, 1, 0)
checkMark.BackgroundTransparency = 1
checkMark.Text = ""
checkMark.TextColor3 = Color3.new(0, 1, 0)
checkMark.TextScaled = true

local function updateCheckBox()
    if isRunning then
        checkMark.Text = "âœ“"
    else
        checkMark.Text = ""
    end
end

checkBox.MouseButton1Click:Connect(function()
    isRunning = not isRunning
    updateCheckBox()
end)

local function performEKeyAction()
    -- SomeFunctionTriggeredByE()
end

local function teleportToJobRig()
    local jobRigModel = game.Workspace:FindFirstChild("JobRig")
    
    if jobRigModel and jobRigModel:IsA("Model") then
        local targetPart = jobRigModel.PrimaryPart or jobRigModel:FindFirstChild("HumanoidRootPart") or jobRigModel:FindFirstChildWhichIsA("BasePart")
        
        if targetPart then
            local character = player.Character
            
            if character then
                local humanoidRootPart = character:FindFirstChild("HumanoidRootPart")
                
                if humanoidRootPart then
                    humanoidRootPart.CFrame = targetPart.CFrame
                    
                    wait(4)
                    
                    local deliveryPositions = {}
                    
                    for _, part in pairs(game.Workspace:GetDescendants()) do
                        if part:IsA("BasePart") and part.Name == "DeliveryPosition" then
                            table.insert(deliveryPositions, part)
                        end
                    end
                    
                    for _, pos in ipairs(deliveryPositions) do
                        humanoidRootPart.CFrame = pos.CFrame
                        wait(0.5)
                    end
                    
                    local startTime = tick()
                    local duration = 4
                    
                    while tick() - startTime < duration do
                        performEKeyAction()
                        wait(0.5)
                    end
                else
                    warn("HumanoidRootPart not found in character.")
                end
            else
                warn("Character not found for player.")
            end
        else
            warn("No suitable part found in JobRig model to teleport to.")
        end
    else
        warn("JobRig model not found in workspace.")
    end
end

local function runTeleportLoop()
    while true do
        if isRunning then
            teleportToJobRig()
        end
        wait(2)
    end
end

spawn(runTeleportLoop)
